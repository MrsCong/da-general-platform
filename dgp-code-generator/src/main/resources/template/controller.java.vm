package ${package}.controller;

import com.guokang.app.auth.annotation.CheckUserToken;

import ${package}.dto.${secondModuleName}.${className}QueryDTO;
import ${package}.dto.${secondModuleName}.${className}AddDTO;
import ${package}.dto.${secondModuleName}.${className}UpdateDTO;
import ${package}.application.${className}AppService;
import ${package}.vo.${className}VO;
import com.guokang.ms.core.http.request.IdRequest;
import com.guokang.ms.core.http.response.ObjectResponse;
import com.guokang.ms.core.http.response.PageResponse;
import com.guokang.ms.core.web.rest.BaseController;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.NonNull;
import org.springframework.web.bind.annotation.*;

/**
 * @author ${author}
 * @version ${datetime}
 */
@RestController
@RequestMapping("/${secondModuleName}")
@CheckUserToken
@Api(value = "${className}Controller", tags = "${comments}控制器")
public class ${className}Controller extends BaseController<${className}AppService> {

    @PostMapping(value = "/add${className}")
    @ApiOperation(value = "新增${comments}")
    public ObjectResponse<Integer> add${className}(@RequestBody ${className}AddDTO dto) {
        Integer integer = appService.add${className}(dto);
        return ObjectResponse.success(integer);
    }

    @PostMapping(value = "/update${className}")
    @ApiOperation(value = "修改${comments}")
    public ObjectResponse<Integer> update${className}(@RequestBody ${className}UpdateDTO dto) {
        Integer integer = appService.update${className}(dto);
        return ObjectResponse.success(integer);
    }

    @PostMapping(value = "/get${className}Page")
    @ApiOperation(value = "分页查询${comments}表信息列表")
    public PageResponse<${className}VO> list${className}PageByQuery(
            @RequestBody ${className}QueryDTO dto) {
        PageResponse<${className}VO> query = appService.list${className}PageByQuery(dto);
        return query;
    }

    @PostMapping(value = "/get${className}ById")
    @ApiOperation(value = "查询${comments}详情")
    public ObjectResponse<${className}VO> get${className}ById(@RequestBody IdRequest<Long> dto) {
            ${className}VO vo = appService.get${className}ById(dto.getId());
        return ObjectResponse.success(vo);
    }

    @PostMapping(value = "/delete${className}")
    @ApiOperation(value = "删除${comments}")
    public ObjectResponse<Integer> delete${className}(@RequestBody IdRequest<Long> dto) {
        Integer integer = appService.delete${className}(dto.getId());
        return ObjectResponse.success(integer);
    }

}